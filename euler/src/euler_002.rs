// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//   										1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.

// Solution of second Euler problem.
pub fn euler_2(input: i32) -> i32 {
    let mut sum = 0;
    let mut fib: [i32; 3] = [0, 1, 1];

    while fib[2] <= input {
        if fib[2] % 2 == 0 {
            sum += fib[2];
        }

        fib[0] = fib[1];
        fib[1] = fib[2];
        fib[2] = fib[0] + fib[1];
    }

    sum
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_euler_2() {
        let parameters = &[
            (8, 10),
            (10, 10),
            (34, 44),
            (60, 44),
            (1000, 798),
            (100000, 60696),
            (4000000, 4613732),
        ];

        for (input, output) in parameters {
            assert_eq!(euler_2(*input), *output);
        }
    }
}
